from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards import reply, inline
from services.content_generation import ContentGeneration
from database import db
from config import config
import logging

router = Router()

class UserStates(StatesGroup):
    main_menu = State()
    chatgpt = State()
    gpt4o = State()
    imagine = State()
    premium_purchase = State()
    course = State()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    if not await check_subscription(message.bot, user_id):
        builder = inline.get_subscription_keyboard()
        await message.answer(
            "üîí –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'",
            reply_markup=builder
        )
        return
    
    user = db.get_user(user_id)
    await message.answer(
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ YarseoneiroAI!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/chatgpt - –î–∏–∞–ª–æ–≥ —Å GPT-4o mini (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n"
        "/gpt4o - –î–∏–∞–ª–æ–≥ —Å GPT-4o (–ø–ª–∞—Ç–Ω–æ)\n"
        "/imagine –∏–ª–∏ /image - –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å DALL-E (–ø–ª–∞—Ç–Ω–æ)\n"
        "/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n"
        "/bonus - –ü—Ä–æ–π—Ç–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"
        "/invite - –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã\n"
        "/premium - –ö—É–ø–∏—Ç—å Premium\n\n"
        f"–£ –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ: {user['free_generations']} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá",
        reply_markup=reply.get_main_menu()
    )
    await state.set_state(UserStates.main_menu)

@router.message(F.text == "ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞")
async def text_generation(message: Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    model = "gpt-4o" if user['premium'] else "gpt-4o-mini"
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è {model}:")
    await state.set_state(UserStates.chatgpt)

@router.message(F.text == "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
async def image_generation(message: Message, state: FSMContext):
    await cmd_imagine(message, state)

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: Message):
    await cmd_profile(message)

@router.message(F.text == "‚≠êÔ∏è Premium")
async def premium(message: Message, state: FSMContext):
    await cmd_premium(message, state)

@router.message(F.text == "üìö –ë–æ–Ω—É—Å–Ω—ã–π –∫—É—Ä—Å")
async def bonus_course(message: Message, state: FSMContext):
    await cmd_bonus(message, state)

@router.message(F.text == "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π")
async def invite_friends(message: Message):
    await cmd_invite(message)

@router.message(Command("chatgpt"))
async def cmd_chatgpt(message: Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    model = "gpt-4o" if user['premium'] else "gpt-4o-mini"
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è {model}:")
    await state.set_state(UserStates.chatgpt)

@router.message(UserStates.chatgpt)
async def process_chatgpt(message: Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    model = "gpt-4o" if user['premium'] else "gpt-4o-mini"
    response = await ContentGeneration.generate_text(message.text, model=model)
    await message.answer(response)
    await state.set_state(UserStates.main_menu)

@router.message(Command("gpt4o"))
async def cmd_gpt4o(message: Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    if user['free_generations'] <= 0 and not user['premium']:
        await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –ö—É–ø–∏—Ç–µ Premium –∏–ª–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –±–æ–Ω—É—Å—ã.")
        return
    model = "GPT-4o" if user['premium'] else "GPT-4o mini"
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è {model}:")
    await state.set_state(UserStates.gpt4o)

@router.message(UserStates.gpt4o)
async def process_gpt4o(message: Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    if not user['premium']:
        if user['free_generations'] <= 0:
            await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –ö—É–ø–∏—Ç–µ Premium –∏–ª–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –±–æ–Ω—É—Å—ã.")
            await state.set_state(UserStates.main_menu)
            return
        user['free_generations'] -= 1
        db.update_user(message.from_user.id, user)
    
    model = "gpt-4o" if user['premium'] else "gpt-4o-mini"
    response = await ContentGeneration.generate_text(message.text, model=model)
    await message.answer(response)
    await state.set_state(UserStates.main_menu)

@router.message(Command("imagine"))
@router.message(Command("image"))
async def cmd_imagine(message: Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    if user['free_generations'] <= 0 and not user['premium']:
        await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –ö—É–ø–∏—Ç–µ Premium –∏–ª–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –±–æ–Ω—É—Å—ã.")
        return
    await message.answer("–û–ø–∏—à–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:")
    await state.set_state(UserStates.imagine)

@router.message(UserStates.imagine)
async def process_imagine(message: Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    if not user['premium']:
        user['free_generations'] -= 1
        db.update_user(message.from_user.id, user)
    image = await ContentGeneration.generate_image(message.text)
    if image:
        await message.answer_photo(photo=image)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    await state.set_state(UserStates.main_menu)

@router.message(Command("profile"))
async def cmd_profile(message: Message):
    user = db.get_user(message.from_user.id)
    profile_text = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"üî¢ –û—Å—Ç–∞–≤—à–∏–µ—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {user['free_generations']}\n"
        f"üåü Premium: {'–î–∞' if user['premium'] else '–ù–µ—Ç'}\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user['invited_users'])}\n"
        f"üìö –ü—Ä–æ–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {len(user['completed_lessons'])}"
    )
    await message.answer(profile_text)

@router.message(Command("bonus"))
async def cmd_bonus(message: Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    if len(user['completed_lessons']) >= config.MAX_COURSE_BONUS // config.COURSE_BONUS:
        await message.answer("–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –≤—Å–µ —É—Ä–æ–∫–∏ –∏ –ø–æ–ª—É—á–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤.")
        return
    
    courses = db.get_all_lessons()
    next_lesson = len(courses) + 1
    
    if str(next_lesson) in courses:
        lesson = courses[str(next_lesson)]
        await message.answer(f"–£—Ä–æ–∫ {next_lesson}: {lesson['title']}\n\n{lesson['content']}")
        await message.answer("–ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ', –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ —É—Ä–æ–∫.", reply_markup=inline.get_lesson_complete_keyboard())
        await state.set_state(UserStates.course)
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ–≤—ã–µ —É—Ä–æ–∫–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã.")

@router.callback_query(F.data == "lesson_complete")
async def process_lesson_complete(callback: CallbackQuery, state: FSMContext):
    user = db.get_user(callback.from_user.id)
    next_lesson = len(user['completed_lessons']) + 1
    user['completed_lessons'].append(next_lesson)
    user['free_generations'] += config.COURSE_BONUS
    db.update_user(callback.from_user.id, user)
    await callback.message.answer(f"–£—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {config.COURSE_BONUS} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.")
    await state.set_state(UserStates.main_menu)

@router.message(Command("invite"))
async def cmd_invite(message: Message):
    user_id = message.from_user.id
    bot_info = await message.bot.get_me()
    invite_link = f"https://t.me/{bot_info.username}?start={user_id}"
    await message.answer(
        f"üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ {config.INVITE_BONUS} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π!\n\n"
        f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {invite_link}\n\n"
        "–ö–æ–≥–¥–∞ –≤–∞—à –¥—Ä—É–≥ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å."
    )

@router.message(Command("premium"))
async def cmd_premium(message: Message, state: FSMContext):
    await message.answer(
        "üåü Premium –ø–æ–¥–ø–∏—Å–∫–∞\n\n"
        "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
        "- –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"
        "- –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º\n"
        "- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å: $9.99/–º–µ—Å—è—Ü\n\n"
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=inline.get_premium_keyboard()
    )
    await state.set_state(UserStates.premium_purchase)

@router.callback_query(F.data == "buy_premium")
async def process_buy_premium(callback: CallbackQuery, state: FSMContext):
    # Here you would implement the actual payment processing
    # For now, we'll just simulate activating Premium
    user = db.get_user(callback.from_user.id)
    user['premium'] = True
    user['free_generations'] += config.PREMIUM_GENERATIONS
    db.update_user(callback.from_user.id, user)
    await callback.message.answer(
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ Premium!\n"
        f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {config.PREMIUM_GENERATIONS} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π."
    )
    await state.set_state(UserStates.main_menu)

async def check_subscription(bot, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(config.CHANNEL_ID, user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

